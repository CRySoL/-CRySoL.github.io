---
migrated: node/773
layout: post
title: 'ZeroC Ice: Tareas periódicas en un servidor'
created: 1189532974
author: david_villa
comments: true
category: recipe
tags:
- Ice
- Arco
---
bq(head). Cómo ejecutar una (o varias) funciones periódicas en un servidor Ice.


<!--break-->


Crear un servidor Ice es muy fácil con ayuda de la clase _Ice.Application_. El _communicator()_ corre en un hilo distinto dejando libre el flujo actual para realizar otras tareas. Lo habitual después de configurar el adaptador y arrancar el comunicador, es invocar el método @waitForShutdown()@ en espera de que el servidor acabe. Este es un servidor mínimo en Python aplicando esa idea:



<div>
{% highlight python %}
import sys, Ice

class HelloI(Ice.Object):
    def ice_ping(self, current=None):
        print "ping()"

class Server(Ice.Application):
    def run(self, argv):
        adapter = self.communicator().\
                  createObjectAdapterWithEndpoints("Server", "default -p 9999")

        adapter.add(HelloI(), Ice.stringToIdentity("Hello"))
        adapter.activate()

        self.shutdownOnInterrupt()
        self.communicator().waitForShutdown()
        return 0

sys.exit(Server().main(sys.argv))
{% endhighlight %}
</div>


A efectos de pruebas, el cliente sería:



<div>
{% highlight python %}
import sys, Ice

class Client (Ice.Application):
    def run(self, argv):
        base = self.communicator().stringToProxy("Hello:default -p 9999")
        base.ice_ping()
        return 0

sys.exit(Client().main(sys.argv))
{% endhighlight %}
</div>


Ahora imagina que, en el servidor, necesitas ejecutar un método cada 2 segundos. Una forma sencilla es utilizar el bucle de eventos de _gobject_, es decir, algo como lo siguiente (sólo pongo la clase _Server_):



<div>
{% highlight python %}
class Server(Ice.Application):
    def run(self, argv):
        adapter = self.communicator().\
                  createObjectAdapterWithEndpoints("Server", "default -p 9999")

        adapter.add(HelloI(), Ice.stringToIdentity("Hello"))
        adapter.activate()

        self.shutdownOnInterrupt()

        gobject.threads_init()
        gobject.timeout_add(2000, self.event)
        self.loop = gobject.MainLoop()
        self.loop.run()

        return 0

    def event(self):
        print 'Event!'
        return True
{% endhighlight %}
</div>


Y esto funciona bien salvo por una pequeña pero desesperante cuestión: el programa no se cierra al pulsar Ctrl-C. Para arreglarlo, parece que lo más sencillo es usar otro método de _Ice.Applicacion_ llamado <tt>callbackOnInterrupt()</tt> que provoca la ejecución del método especial <tt>interruptCallback()</tt> cuando se produce alguna de las "señales prefijadas":https://doc.zeroc.com/ice/3.7/communicator-and-other-core-local-features/application-helper-class#26280330afc0961d49894fa382a1057b360e815e. Se puede aprovechar la ejecución de ese método para terminar el bucle de eventos de gobject. De tal modo que el servidor quedaría algo como:



<div>
{% highlight python %}
class Server(Ice.Application):
    def run(self, argv):
        adapter = self.communicator().\
                  createObjectAdapterWithEndpoints("Server", "default -p 9999")

        adapter.add(HelloI(), Ice.stringToIdentity("Hello"))
        adapter.activate()

        self.callbackOnInterrupt()

        gobject.threads_init()
        gobject.timeout_add(2000, self.event)
        self.loop = gobject.MainLoop()
        self.loop.run()

        self.communicator().shutdown()
        return 0

    def interruptCallback(self, args):
        gobject.idle_add(self.loop.quit)

    def event(self):
        print 'Event!'
        return True
{% endhighlight %}
</div>


En la próxima entrega, lo mismo, pero en C++...
