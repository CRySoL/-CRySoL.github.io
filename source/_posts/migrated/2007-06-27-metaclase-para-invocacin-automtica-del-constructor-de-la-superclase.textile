---
migrated: node/1018
layout: post
title: Metaclase para invocación automática del "constructor" de la superclase
created: 1182981171
author: david_villa
comments: true
---
Esta receta incluye la implementación "comentada" de una metaclase Python para conseguir que el constructor de la superclase se invoque automáticamente.

<!--break-->


h2. Introducción

Para una mejor comprensión y máximo aprovechamiento, se recomienda al lector no iniciado en las metaclases, leer la receta "Ahí va la virgen! Metaclases! (con Python)":node/600 antes de proceder con esta.

h2. Invocación automática del "constructor" de la superclase

Cuando empezaste con Python quizá te sorprendió que cuando heredas una clase y sobrecargas el método @__init__@, no se invoque al @__init__@ de su superclase. Es decir:



<div>
{% highlight python %}
>>> class A(object):
...    def __init__(self):
...       print 'init A'
...
>>> class B(A):
...    def __init__(self):
...       print 'init B'
...
>>> b = B()
init B
{% endhighlight %}
</div>


Pues bien, la siguiente metaclase permite que al crear una instancia de B, se invoque también el método @__init__@ de A de forma automática:



<div>
{% highlight python %}
class AutoSuper(type):
   def __call__(cls, *args, **kw):
      obj = type.__call__(cls, *args, **kw)
      for i in cls.__bases__:
          i.__init__(obj, *args, **kw)
      return obj
{% endhighlight %}
</div>


Si ahora pruebas el ejemplo anterior, haciendo que A utilice la metaclase AutoSuper:



<div>
{% highlight python %}
>>> class A(object):
...    __metaclass__ = AutoSuper
...    def __init__(self):
...       print 'init A'
...
>>> class B(A):
...    def __init__(self):
...       print 'init B'
...
>>> b = B()
init B
init A
{% endhighlight %}
</div>


Señalar que esta solución no es transitiva. La metaclase hace que se invoquen los @__init__@ de las superclases de esa clase. Es decir, sólo las superclases inmediatas, no se invocan los @__init__@ de ancestros indirectos.
