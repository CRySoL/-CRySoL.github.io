---
migrated: node/333
layout: post
title: !binary |-
  UHJvZ3JhbWFjacOzbiBkZSBtaWNyb2NvbnRyb2xhZG9yZXMgQVZSIGVuIEdO
  VS9MaW51eA==
created: 1150328107
author: !binary |-
  amF2aWVyYWxzbw==
category: !binary |-
  cmVjaXBl
tags:
- !binary |-
  ZW1iZWRkZWQ=
---
<blockquote>
Los microcontroladores AVR de ATMEL son una familia bastante potente y asequible. Son RISC y ofrecen características como la programación ISP (en el propio circuito), temporizadores, comparadores analógicos, PWM, RS232 y un largo etcétera. Aquí se explica qué se necesita para poder escribir programas en C y C++
</blockquote>

<h2>Ingredientes</h2>

Lo primero que necesitas instalar son las librerias:

* <b>avr-libc</b>
* <b>binutils</b>

Además necesitas algunas otras cosas como:

* <b>avr-gcc</b>
* <b>avr-gdb</b>

Para instalarlos, si usas Debian ya sabes:


<div class="console">
{% highlight console %}
# apt-get -f install avr-libc gcc-avr binutils-avr gdb-avr

{% endhighlight %}
</div>

<h2>Compilando un programa</h2>

El siguiente ejemplo de Makefile sería para poder compilar un programa dividido en varios ficheros fuente para un AT90S8515. Se trata de un micro con 512 Bytes de RAM, 8 K de Flash y 512 Bytes de EEPROM. Éste modelo ya está un poco obsoleto y ha sido sustituido por el ATMEGA8515, que es totalmente compatible pero ofrece varias mejoras. Aunque este ejemplo servirá para ilustrar la creación de un Makefile:


<div>
{% highlight text %}
MCU=at90s8515
CC=avr-gcc
OBJCOPY=avr-objcopy
CFLAGS=-g -mmcu=$(MCU) -Wall -Wstrict-prototypes 
#-------------------
all: prueba.hex
#-------------------
prueba.hex : prueba.out 
	$(OBJCOPY) -R .eeprom -O ihex prueba.out prueba.hex 

prueba.out : prueba.o williams_8515.o potencia.o
	$(CC) $(CFLAGS) -o prueba.out -Wl,-Map,prueba.map\
                       prueba.o williams_8515.o potencia.o
	avr-objdump -S prueba.out > prueba.des

prueba.o : prueba.c 
	$(CC) $(CFLAGS) -Os -c prueba.c

potencia.o : potencia.c 
	$(CC) $(CFLAGS) -Os -c potencia.c

williams_8515.o: williams_8515.c
	$(CC) $(CFLAGS) -Os -c williams_8515.c
{% endhighlight %}
</div>

Esto genera un fichero, <b>prueba.hex</b> con el contenido del código máquina para el microcontrolador. El código está en formato de INTEL HEXADECIMAL. También obtendrás otro archivo <b>prueba.dsm</b> en el que puedes ver el desensamblado del código generado.
Los ficheros fuente de los que se parte son <b>prueba.c</b>, <b>potencia.c</b> y <b>williams_8515.c</b>

<h2>Otras cosas interesantes</h2>

Algunas cosas interesantes que nos ofrecen las binutils son por ejemplo:


<div class="console">
{% highlight console %}
$ avr-objdump -h prueba.out

{% endhighlight %}
</div>

@prueba.out@ fue generado por el @Makefile@ y contiene información diversa sobre la compilación. En éste ejemplo, la salida mostrará el tamaño de las diferentes secciones del programa.


<div class="console">
{% highlight console %}
$ avr-size prueba.out

{% endhighlight %}
</div>

Hace lo mismo que el comando mostrado anteriormente, pero de forma mas resumida.

Por último, el comando mostrado en el @Makefile@:


<div class="console">
{% highlight console %}
$ avr-objdump -S prueba.out

{% endhighlight %}
</div>

Devuelve el desensamblado del código.

<h2>Enlaces interesantes</h2>
<ul>
<li><a href="http://savannah.nongnu.org/projects/avr-libc/">AVR C Runtime Library</a>.</li>
<li><a href="http://linuxfocus.berlios.de/Castellano/November2004/article352.shtml#352lfindex2">Programando el microcontrolador AVR con GCC usando libc 1.0.4</a>.</li>
</ul>
