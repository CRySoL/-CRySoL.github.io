---
migrated: node/1703
layout: post
title: Adios Google Reader, Hola Tiny Tiny RSS
created: 1363712301
author: fsancho
category: recipe
tags:
- ocio
---
Como todos sabréis a estas alturas, Google ha decidido dispararse en el pie otra vez. El próximo 1 de Julio cerrará el servicio Google Reader sin dar muchas mas explicaciones. No es este el sitio para entrar en las razones que pueda tener Google para cerrar este estupendo servicio. Las cosas que gratis vienen sin mas explicaciones se van, de manera que va siendo el momento de buscar una alternativa.
<!--break-->
La solución mas directa sería volver al lector RSS de escritorio, y ahí Liferea es una opción mas que interesante. Si quieres seguir utilizando un lector en la nube y salvar así las restricciones de un proxy fascista, tienes estupendas alternativas como "Feedly":http://feedly.com o "TheOldReader":http://theoldreader.com, aunque ninguna, en mi opinión, consiguen devolver la experiencia de Google Reader, uno por exceso y el otro por defecto.

Tras mucho trasegar (mentira, que fui a tiro hecho mas o menos), he encontrado una opción de Lector RSS en la nube que además es autogestionado . Es decir, lo montas es un servidor web y lo administras a tu gusto. Se trata de Tiny Tiny RSS. 

La ventaja de utilizar un lector RSS en la nube y autogestionado es que la probabilidad de que sea cortado por el proxy de tu trabajo es mucho mas baja, con lo que vas a poder procastinar mucho mas eficientemente.

En los siguientes pasos voy a intentar explicar como dejar ttRSS configurado con un comportamiento similar a Google Reader.

h2. Instalación

La instalación no tiene demasiadas complicaciones, si estás acostumbrado a las típicas aplicaciones LAMP, claro está.

Esta aplicación requiere un servidor web para alojarse, PHP para ejecutarse y una base de datos MySQL o Postgres para almacenar la información. Por simplicidad voy a suponer que todo esto está en la misma máquina.

En una distribución Debian los requisitos se instalan de esta forma


<div class="console">
{% highlight console %}
# apt-get install mysql-server libapache2-mod-php php5-mysql php5-xmlrpc

{% endhighlight %}
</div>

Para RedHat, CentOS y similares con yum


<div class="console">
{% highlight console %}
# yum install mysql php-mysql php-mbstring php-xmlrpc httpd

{% endhighlight %}
</div>

En primer lugar descargamos la última versión disponible del programa. En el momento de escribir esta receta es la 1.7.4 (<a href="https://github.com/gothfox/Tiny-Tiny-RSS/archive/1.7.4.tar.gz">https://github.com/gothfox/Tiny-Tiny-RSS/archive/1.7.4.tar.gz</a>)

Nos situamos en el directorio WWW-ROOT de nuestra máquina. En las Debian y derivados, _/var/www/_, en las RedHat y derivados _/var/www/html_, y descomprimimos el fichero.


<div class="console">
{% highlight console %}
# tar zxvf Tiny-Tiny-RSS-1.7.4.tar.gz
{% endhighlight %}
</div>

Se creará el directorio _"Tiny-Tiny-RSS-1.7.4"_ que renombraremos a _"tt-rss"_ por comodidad.


<div class="console">
{% highlight console %}
# mv Tiny-Tiny-RSS-1.7.4 tt-rss
{% endhighlight %}
</div>

Ahora debemos asignar al usuario que ejecuta el servidor web (
@www-data@, o @apache@) la posesión de los ficheros del programa.


<div class="console">
{% highlight console %}
chown -R www-data:www-data tt-rss
{% endhighlight %}
</div>

o si eres de RedHat


<div class="console">
{% highlight console %}
chown -R apache:apache tt-rss
{% endhighlight %}
</div>

Ahora procedemos a instalar la aplicación. Esta herramienta aun no tiene un asistente de instalación por lo que el proceso es manual. Dentro del directorio del programa _"tt-rss"_ está la plantilla de configuración que debemos copiar en el fichero definitivo.


<div class="console">
{% highlight console %}
# cp config.php-dist config.php
{% endhighlight %}
</div>

Editamos el fichero con nuestro editor favorito y veremos al principio esto.


<div>
{% highlight php %}
        define('DB_TYPE', "pgsql"); // or mysql
        define('DB_HOST', "localhost");
        define('DB_USER', "fox");
        define('DB_NAME', "fox");
        define('DB_PASS', "XXXXXX");
{% endhighlight %}
</div>

Establecemos los valores que creamos convenientes. Por ejemplo


<div>
{% highlight php %}
        define('DB_TYPE', "mysql");
        define('DB_HOST', "localhost");
        define('DB_USER', "ttrss");
        define('DB_NAME', "ttrss_db");
        define('DB_PASS', "passwordquequieras");
{% endhighlight %}
</div>

Obviamente esta configuración hay que hacerla previamente en la base de datos antes de lanzar la aplicación.Una forma sencilla es usar _phpmyadmin_. Tenemos que crear un usuario y una base de datos. En este caso el usuario se llama @"ttrss"@ y la base de datos @"ttrss_db"@

Con estos datos ya establecidos precargamos los datos inciales que se encuentran en el directorio _"schema/ttrss_schema_mysql.sql"_. Puedes hacerlo desde la linea de comandos o desde el propio phpmyadmin. 


<div class="console">
{% highlight console %}
# mysql -u ttrss -p -D ttrss_db < ttrss_schema_mysql.sql
{% endhighlight %}
</div>

Siguiendo estos pasos ya deberíamos tener funcionando ttRSS en nuestro servidor. Para comprobarlo abrimos un navegador y nos dirigimos a la dirección _http://servidor/tt-rss_ .Por defecto se accede con las credenciales _"admin/password"_. Te recomiendo que cambies la contraseña del administrador y que añadas un usuario para utilizar el programa.

h2. Actualizar las Fuentes

Ahora tenemos que establecer el mecanismo de actualización de las fuentes RSS. Si no ejecutamos este paso, tendremos que tener la aplicación abierta en el navegador para que se lance la actualización periódica.

El procedimiento recomendado para actualizar las fuentes es utilizar el demonio @update_daemon2.php@. Este script tiene la pega de que no se "desengancha" del terminal una vez lo lanzas por lo que es un poco engorroso lanzarlo manualmente.

Si tu distribución utiliza el sistema Upstart hay un procedimiento bastante sencillo.

Crea el fichero _/etc/init/ttrssdaemon.conf_ con el siguiente contenido.


<div>
{% highlight bash %}
description "TT-RSS Feed Daemon"

author "Sean Payne <@zero_divide_1 on Twitter>"



start on (local-filesystems and net-device-up IFACE!=lo)

stop on runlevel [!2345]

respawn



script

        cd /var/www/tt-rss

        exec su www-data -c "php ./update_daemon2.php"

end script
{% endhighlight %}
</div>

Después crea el enlace simbólico siguiente


<div class="console">
{% highlight console %}
# ln -s /lib/init/upstart-job /etc/init.d/ttrssdaemon
{% endhighlight %}
</div>

Por último inicia el demonio con el comando


<div class="console">
{% highlight console %}
# start ttrssdaemon
{% endhighlight %}
</div>

Puedes ver la salida de log del demonio en _/var/log/upstart/ttrssdaemon.log_

Si no tienes upstart, puedes crear un servicio sysvinit en /etc/init.d/ttrssdaemon. Las utilidades start-stop-daemon son tus amigas. Pero recuerda que el usuario que ejecute el script no debe ser root, sino el mismo que ejecuta el servidor web (www-data o apache).

El otro procedimiento es mediante cron. Funciona en todas las distribuciones y es muy sencillo. Nos vamos al directorio /etc/cron.d/ y creamos el fichero ttrssupdate con el siguiente contenido.


<div>
{% highlight bash %}
*/30 *   * * *    www-data   cd /var/www/tt-rss && /usr/bin/php /var/www/tt-rss/update.php -feeds >/dev/null 2>&1
{% endhighlight %}
</div>

En la versión 1.7.5 cambia ligeramente la sintaxis que pasa a utilizar el doble guión. 

<div>
{% highlight bash %}
*/30 *   * * *    www-data   cd /var/www/tt-rss && /usr/bin/php /var/www/tt-rss/update.php --feeds >/dev/null 2>&1
{% endhighlight %}
</div>

Aquí le estamos diciendo a cron que cada 30 minutos el usuario @www-data@ (cambialo por @apache@ si estás ejecutando RedHat o CentOS) ejecute el script de actualización de fuentes.


h2. Configurar ttRSS

La configuración por defecto de ttRSS no está mal, pero si vienes de Google Reader te parecerá un poco incómoda. Para conseguir que ttRSS tenga la apariencia de Google Reader hay que marcar las siguientes opciones.

Debes ir al menú Preferences que se encuentra arriba a la derecha, dentro del menú Acciones.

En ese menú hay que marcar las opciones.

<div>
{% highlight text %}
"Marcar como leídos los artículos automáticamente"
"Despliegue combinado de la fuente"
"Habilitar categorías de fuentes"
{% endhighlight %}
</div>

Si miras mas abajo verás la barra de _Plugins_. Desde ahí puedes activar las características sociales de ttRSS como enviar a Google+ o Twitter

Si además queréis aproximaros aun mas a la estética de Google Reader, podéis copiar esta hoja de estilos en las preferencias. Debéis ir a "Personalizar hoja de estilos" y pulsar el botón "Customize", eso os abrirá una caja de texto en la que debéis copiar este código. ("fuente":http://tt-rss.org/forum/viewtopic.php?f=22&t=1344#p6249)


<div>
{% highlight html %}
/*Arial 13px is familiar and pleasant since Google Reader days.*/
body#ttrssMain, body#ttrssPrefs, body#ttrssLogin, body {
   font-family: arial, helvetica, sans-serif;
   font-size: 13px;
}

/*On wide screens, the content is far to wide which makes it unreadable. This gives line breaks for easier reading…*/
div.cdmContentInner, div.cdmContentInner * {
   max-width: 650px;
}

/*…but I want images to only be restricted by the screen width so I unset the property for these.*/
div.cdmContentInner img {
   max-width: none;
}

/*Bold text is disabled by default for some reason. This enables it.*/
div.cdmContentInner b, div.cdmContentInner strong {
   font-weight: bold;
}

/*More visible title, Google Reader style.*/
div.cdmHeader .title, div.cdmHeader span.hlFeed a {
   font-size: 18px;
   font-weight: bold;
}

/*Fittingly enlarged date notation.*/
div.cdmHeader span.updated {
   font-size: 16px;
}

/*The Google Reader blue nuance — pleasant on the eyes.*/
div.cdmHeader .title, div#headlines-toolbar span.r a {
   color: #15c;
}

div.cdmHeader .title .titleAuthor {
   color: silver;
}

/*Some item spacing; makes borders look better (also similar to Google Reader).*/
.even, .odd {
   margin: 5px 0;
}

/*Remove background color on selected items — hinders readability in my view. Also put borders on active…*/
.even.Unread.Selected, .odd.Unread.Selected, .even.Selected, .odd.Selected {
   border: 2px solid #15c;
   background-color: inherit ! important;
}

/*…and inactive items.*/
.even, .odd, .even.Unread, .odd.Unread {
   border: 2px dashed silver;
}

/*Reset default table styling from tt-rss changes of table elements in RSS feeds — vanilla looks weird, imho.*/
/*Fixed in upstream @ https://github.com/gothfox/Tiny-Tiny-RSS/commit/b7ade39dd116e1634c49eb46711a1d6828140c5e , I believe.*/
.odd.Selected td, .even.Selected td, .odd td, .even td {
   border: 1px inset gray;
   background: inherit ! important;
}
{% endhighlight %}
</div>

Este es el aspecto que tendrá. Como veis bastante parecido a Google Reader. 
<img src="http://crysol.org/files/Selección_001.png" width="750" />

Por cierto, si queréis utilizar alguna aplicación externa para conectaros a ttRSS, como por ejemplo alguna de las que existen para "Android":https://play.google.com/store/search?q=tiny+tiny+rss , deberéis marcar la opción

<div>
{% highlight text %}
Habilitar API externa
{% endhighlight %}
</div>

h2. Actualizar ttRSS

Una característica interesante de ttRSS es que se puede actualizar en línea. Para activar esta característica hay que editar el fichero config.php y en la sección PLUGINS añadir el plugin updater. La línea quedaría así.


<div>
{% highlight php %}
define('PLUGINS', 'auth_remote, auth_internal, note, updater');
{% endhighlight %}
</div>

Una vez hecho, en la sección preferencias, bajo la barra de Plugins debería aparecer la barra _"Actualizar Tiny Tiny RSS"_.

Para que el procedimiento funcione correctamente, el directorio superior a tt-rss también debe pertenecer al usuario que ejecuta apache. Siguiendo el ejemplo de esta instalación...

En el caso de Debian y derivados.


<div class="console">
{% highlight console %}
# chown www-data:www-data /var/www
{% endhighlight %}
</div>

En el caso de RedHat y derivados


<div class="console">
{% highlight console %}
# chown apache:apache /var/www/html
{% endhighlight %}
</div>

En el caso de que la actualización desde el navegador no funcione, se puede lanzar el proceso desde la consola con la siguiente orden.


<div class="console">
{% highlight console %}
su www-data -c "/usr/bin/php /var/www/tt-rss/update.php -update_self"
{% endhighlight %}
</div>

Sustituye @www-data@ por @apache@ si estás en RedHat o derivados. Ah, y acordaos que a partir de la versión 1.7.5 los argumentos se pasan con doble guión.
