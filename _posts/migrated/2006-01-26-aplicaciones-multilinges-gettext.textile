---
migrated: node/203
layout: post
title: 'Aplicaciones multilingües: gettext'
created: 1138294905
author: magmax
comments: true
category: recipe
---
<blockquote>
A menudo se piensa que una aplicación estaría mucho mejor si se encontrara en varios idiomas. Podemos pensar en distintas formas de soportar esto, pero otros ya lo han pensado por nosotros y han creado las fabulosas herramientas <i>gettext</i>. Este documento pretende ser una guía para el uso rápido (rápido de verdad) de estas herramientas.
</blockquote>

<h2> Ingredientes</h2>

<ul>
<li>gettext</li>
</ul>

<h2> Modificaciones en el código </h2>

Lo primero es acordarse de evitar cadenas sin más (al menos las que se muestran) en nuestro código. Ahora importaremos la librería gettext y utilizaremos la función gettext. Se encuentra disponible para numerosos lenguajes, aunque aquí se explicará con ejemplos en python (las diferencias serán mínimas en el resto de lenguajes).

En Python queda así:


<div>
{% highlight python %}
import gettext
gettext.textdomain("programita")
gettext.bindtextdomain("programita", "./mo")
gettext.gettext("hello, world!")
{% endhighlight %}
</div>


No os asustéis: Las funciones "textdomain" y "bindtextdomain" sirven para decirle a gettext dónde se encuentran las traducciones. Aquí se está poniendo un ejemplo, así que sustituid "programita" por el nombre de vuestro programa, y "./mo" por el directorio donde vamos a meter las traducciones.

A menudo, además, se suele importar la función <tt>gettext</tt> cambiándole el nombre a algo más sencillo como la barra baja. De esta manera, nos evitamos tener que escribir "<tt>gettext.gettext</tt>" cada vez. Para hacer esto hay distintas maneras, una de ellas es durante la importación:

<div>
{% highlight python %}
from gettext import gettext as _
{% endhighlight %}
</div>

<h2> Generación de la plantilla de traducción (.pot)</h2>

Podemos obtener la plantilla del código en casi cualquier lenguaje: C, C++, Python, Perl, Glade, Java, ... Y se hace así:


<div class="console">
{% highlight console %}

$ xgettext --language=Python -j programita.py
{% endhighlight %}
</div>

Las opciones son: <i>--language</i> indicando el lenguaje del código, y <i>-j</i> que indica que, si hay ya un .pot existente, se deben mezclar los mensajes.

Si hemos usado algún cambio y no aparece la función como "gettext", será necesario usar también la opción <i>--keyword</i>. Por ejemplo:


<div class="console">
{% highlight console %}

$ xgettext --language=Python -j -k _ programita.py
{% endhighlight %}
</div>

Ale, ya tenemos el <tt>messages.pot</tt>.


<h2> Generar el fichero de traducciones (*.po)</h2>

Ahora se utiliza el <tt>messages.pot</tt> para generar cada plantilla. Nosotros queremos la traducción al castellano, así que será <tt>es.po</tt>:


<div class="console">
{% highlight console %}

$ msginit -i messages.pot -o es.po
{% endhighlight %}
</div>

Ahora viene la parte en la que editamos el fichero es.po (yo suelo usar gtranslator o kbabel) y demás.


<h2> Mezclar el fichero de traducciones (.po) con una nueva plantilla (.pot)</h2>

Este sistema sería poco eficiente si tuviéramos que traducirlo todo de nuevo cada vez que se cambie el fuente. Por ello, hay un sistema por el que se mezcla el fichero ya traducido con la plantilla nueva (es decir: volvemos al paso de creación de plantilla y después ejecutamos esto):


<div class="console">
{% highlight console %}

$ msgmerge -U es.po messages.pot
{% endhighlight %}
</div>

Y, nuevamente, volvemos a traducir :-D


<h2> Creación del fichero de equivalencias (.mo)</h2>

Realmente, el ficherito .po no se utiliza en el ejecutable. Es necesario utilizar un ficherito .mo. Aquí crearemos nuestro es.mo, como es lógico:


<div class="console">
{% highlight console %}

$ msgfmt es.po mo/es/LC_MESSAGES/programita.mo
{% endhighlight %}
</div>

Como podéis observar, el resultado lo dejamos en <tt>mo/es/LC_MESSAGES/</tt>. Eso lo hacemos así porque en el código fuente dijimos que las traducciones colgarían del directorio <tt>mo</tt>, el idioma es Español (las locales son "es"), y porque todos los .mo deben colgar de un directorio <tt>LC_MESSAGES</tt> dentro de las locales para que sea encontrado correctamente.


<h2> Utilización</h2>

Ya está. No hay nada más que contar. Si las locales son "es", escribirá nuestra traducción, y si son "en", lo escribirá en inglés. Eso es todo.

<h2>Ejemplo</h2>

Veamos un ejemplo, sugerencia hecha por <a href="/node/203#comment-4473">david.villa</a>:


<div>
{% highlight python %}
#!/usr/bin/python

import gettext

APP = "hello"

gettext.textdomain ( APP )
gettext.bindtextdomain ( APP, "./mo" )

_ = gettext.gettext

print _("hello, world!")
{% endhighlight %}
</div>

Como requisito, necesitaremos el directorio donde vamos adejar las cosas. En el código hemos puesto "./mo", así que hay que ser consecuentes:


<div class="console">
{% highlight console %}

$ mkdir -p  mo/es_ES/LC_MESSAGES
{% endhighlight %}
</div>

Ahora inicializamos (llamaremos al <i>.pot</i> "<i>messages.pot</i>:


<div class="console">
{% highlight console %}

$ xgettext --language=Python --keyword=_ -o messages.pot hello.py
{% endhighlight %}
</div>

Y generamos nuestro primer <i>.po</i>:


<div class="console">
{% highlight console %}

$ msginit -i messages.pot -l es_ES
{% endhighlight %}
</div>

Editamos el archivo <tt>es.po</tt> que se nos habrá creado, traduciendo la única cadena. Mi archivo pinta así:

<div>
{% highlight ini %}
# Spanish translations for PACKAGE package.
# Copyright (C) 2010 THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# miguel <miguelangel.garcia@gmail.com>, 2010.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2010-05-25 07:31+0200\n"
"PO-Revision-Date: 2010-05-25 07:32+0200\n"
"Last-Translator: miguel <miguelangel.garcia@gmail.com>\n"
"Language-Team: Spanish <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=ASCII\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: hello.py:12
msgid "hello, world!"
msgstr "hola, mundo!"
{% endhighlight %}
</div>

Por ahora no nos fijaremos mucho en las cosa que deberíamos cambiar, como el <i>PACKAGE</i> y demás. Sólo nos queda compilar:


<div class="console">
{% highlight console %}

$ msgfmt -o mo/es_ES/LC_MESSAGES/hello.mo es.po
{% endhighlight %}
</div>

y probarlo:

<div class="console">
{% highlight console %}

$ LANG=es_ES ./hello.py 
hola, mundo!
$ LANG=en_US ./hello.py 
hello, world!
$ 
{% endhighlight %}
</div>

¡¡Gracias, David, por tu propuesta!!

<h2> Referencias</h2>

* "Manual de gettext":http://www.gnu.org/software/gettext/manual/
* "Traducir aplicaciones PyGTK/Glade":http://www.pipiten.com.ar/archives/7
