---
migrated: node/810
layout: post
title: Catálogo de Modismos y Patrones
created: 1196252680
author: david_villa
comments: true
category: recipe
tags:
- patterns
render_with_liquid: false
---
bq(head). Esta receta incluye únicamente una clasificación de patrones a modo de catálogo y una pequeña descripción de cada uno. Desde aquí enlazaré las recetas específicas para cada patrón.


<!--break-->


h2. Creación de objetos

<p/>

h3. "Forma canónica ortodoxa":node/999

En los lenguajes que lo soportan (C++), permite que una clase definida por el usuario se comporte como un tipo concreto de dato, es decir, como un tipo de dato "empotrado" (built-in) proporcionado por el lenguaje.

h3. Abstract Factory

Es un mecanismo para encapsular un grupo de factorías concretas. Permite crear objetos sin necesidad de conocer la clase concreta en tiempo de compilación ("Definición":http://en.wikipedia.org/wiki/Abstract_factory_pattern)


h3.  Builder

Se usa para construir objetos complejos, a menudo como una serie de pasos, pero desacoplando la representación concreta. ("Definición":http://en.wikipedia.org/wiki/Builder_pattern)


h3. Factory Method

También llamado "constructor virtual". Es una interfaz para la creación de objetos, pero delega a las subclases, qué clase utilizar. ("Definición":http://en.wikipedia.org/wiki/Factory_method_pattern)


h3.  Prototype

Permite crear objetos a partir de otros que sirven de prototipos.  A menudo se emplea como medio de construcción en factorìas. ("Definición":http://en.wikipedia.org/wiki/Prototype_pattern)


h3. "Singleton":singleton

Garantiza que la aplicación sólo pueda crear una instancia de una clase dada. Intentos posteriores de crear nuevos objetos devuelven siempre la instancia original. ("Definición":http://en.wikipedia.org/wiki/Singleton_pattern)

h3. Smart Pointer

Es una clase que se utiliza como si fuera un puntero pero que añade funcionalidad adicional. La más común e importante es que libera automáticamente la memoria dinámica del objeto al que apunta ("Definición":http://en.wikipedia.org/wiki/Smart_pointer)



h2. Estructurales

Composición de clases y objetos

h3. Adapter

<p/>

h3. Bridge

<p/>

h3. Composite

<p/>

h3. Decorator

<p/>

h3. Facade

<p/>

h3. "Flyweight":node/1278

El _peso mosca_ es un patrón muy útil en aplicaciones que utilizan muchos objetos parecidos o idénticos. El objetivo es compartir parte del estado del objeto. Cuando varias instancias comporten los mismos valores para sus atributos (tamaño, color, forma, etc.) realmente el objeto solo se crea una vez y las siguientes instancias referencian el estado del objeto existente ("Definición":"<a href="http://es.wikipedia.org/wiki/Flyweight_%28patr%C3%B3n_de_dise%C3%B1o%29">http://es.wikipedia.org/wiki/Flyweight_%28patr%C3%B3n_de_dise%C3%B1o%29</a>).

h3. Proxy

<p/>

h3. Data Mapper

Desacopla una clase de modelo (la que mantiene los datos en memoria) de su persistencia. Se utiliza una clase adicional que realiza la operaciones sobre la la BD Esto permite que los aspectos de la persistencia puedan cambiar en el futuro sin afectar a la lógica de la aplicación. La persistencia puede estar basada en ficheros, en una BD o incluso mediante un agente remoto sin que eso tenga consecuencias o implique hacer cambios en las clases de la capa de negocio. ("Definición":http://martinfowler.com/eaaCatalog/dataMapper.html)

h2. De comportamiento

Interacción entre clases u objetos y sistemas para asignar responsabilidades.

h3. Chain of Responsability

<p/>

h3. Command

<p/>

h3. Interpreter

<p/>

h3. Iterator

<p/>

h3. Mediator

<p/>

h3. Memento

<p/>

h3. Observer

<p/>

h3. State

<p/>

h3. Strategy

<p/>

h3. Template Method

Dado un conjunto de subclases, la superclase puede expresar (mediante un método) un algoritmo a base de invocaciones a otros métodos de la clase, que actúan como primitivas. Las subclases puede redefinir esos métodos-primitiva para cambiar la funcionalidad pero la secuencia de pasos es la misma para todas ellas. El algoritmo no tiene porqué ser estático, puede estar dirigido por un fichero de entrada (un XML, un bytecode, etc.) que indique qué primitiva debe invocarse en cada momento. ("Definición":http://en.wikipedia.org/wiki/Template_method_pattern)

h3. Visitor

<p/>

h3. Model-View-Controller

<p/>

h2. Aplicaciones concurrentes

<p/>

h3. Reactor

Permite gestionar múltiples eventos asíncronos utilizando un flujo único de ejecución.

h3. Proactor

<p/>

h3. Asynchronous Completion Token

<p/>

h3. Acceptor-Connector

<p/>

h3. Guard

<p/>

h3. Interfaz segura para multi-hilos

<p/>

h3. Aviso de hecho

<p/>

h3. Objetos activos

<p/>

h3. Monitores

<p/>

h3. Mitad-síncrono, mitad-asíncrono

<p/>

h3. Líder-y-Seguidores

<p/>

h2. Referencias

* Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBN 0-201-63361-2.
* "Patrones de diseño para aplicaciones concurrentes":http://trevinca.ei.uvigo.es/~formella/doc/cd03/node93.html
* <a href="http://agamenon.uniandes.edu.co/~pfiguero/soo/">http://agamenon.uniandes.edu.co/~pfiguero/soo/</a>
