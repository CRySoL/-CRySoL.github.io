---
migrated: node/1489
layout: post
title: The poor's man "dropbox"-thing
created: 1301955298
author: david_villa
category: receta
tags:
- networking
---
bq. This recipe shows how to setup a basic synchronization mechanism (similar to DropBox) by means of conventional GNU/Linux tools. This does not require root privileges and no packages (except ssh-server) need to be installed in the server.
<!--break-->
<center>
*WARNING: This procedure may cause data loss. Use it under your responsibility*
</center>
<p/>

h2. Ingredients 

In the client:

* cron
* incron

In the server:

* ssh server

The server should be accessible from everywhere and configured for using "ssh public key authentication":ssh-public-key. Nothing else needs to be modified in your server.


h2. The "poorbox" script

Put that in your @~/bin/poorbox.sh@:



<div>
{% highlight bash %}
#!/bin/bash --
# poorbox.sh {to-host|to-server} [file EVENT]

set -e

SERVER=server
USER=john
FOLDER=PoorBox/

LOCAL=/home/$USER/$FOLDER
REMOTE=$SERVER:$FOLDER

case $1 in
 "to-host")
	SOURCE=$REMOTE
	TARGET=$LOCAL
	;;
 "to-server")
	SOURCE=$LOCAL
	TARGET=$REMOTE
	;;
 * )
    echo "usage: $0 [to-host|to-server]"
	exit 1
esac

LOCK=/tmp/$USER.poorbox

# avoid reentrant execution
flock -n $LOCK-$1 true

if [ "$3" == "IN_DELETE" ]; then
	CMD="ssh $SERVER rm $FOLDER$2"
else
	CMD="rsync -avz --delete $SOURCE$2 $TARGET"
fi

# wait for the inverse transfer
flock $LOCK $CMD
{% endhighlight %}
</div>


h2. Synchronizing host to server

The next configuration will copy or delete any modified file from your laptop/PC to your server account. First, you need to put your username in the @/etc/incron.allow@ file.

Run that in a terminal:


<div class="console">
{% highlight console %}

$ incrontab -e
{% endhighlight %}
</div>

Your default editor will start. Write down next line, save and close.


<temp-div>
{% highlight text %}
/home/john/PoorBox IN_MODIFY,IN_DELETE,IN_CLOSE_WRITE,IN_MOVE /home/john/bin/poorbox.sh to-server $# $%
{% endhighlight %}
</div>

and then:


<div class="console">
{% highlight console %}

$ incrontab -d
{% endhighlight %}
</div>


h2.  Synchronizing host from server

We will not detect changes in server files (although may be possible using the same way). We will poll changes using @cron@. Run next in a console:


<div class="console">
{% highlight console %}

$ crontab -e
{% endhighlight %}
</div>

write and save next line:


<temp-div>
{% highlight text %}
*/1 *  *   *   *     /home/john/bin/poorbox.sh to-host
{% endhighlight %}
</div>

This poll each minute. Of course, you may increase or decrease the polling frequency as you prefer.


h2. Improving performance

Continuous ssh connections does not seems a good idea, but it is possible tweak your config by means of @ControlMaster@ and @KeepAlive@ ssh options.

h2. Limitations 

Currently @incron@ does not detect recursive events (operations on subdirectories)

h2. References

* "Backups con rsync":http://<a href="http://www.vicente-navarro.com/blog/2008/01/13/backups-con-rsync/">www.vicente-navarro.com/blog/2008/01/13/backups-con-rsync/</a>
