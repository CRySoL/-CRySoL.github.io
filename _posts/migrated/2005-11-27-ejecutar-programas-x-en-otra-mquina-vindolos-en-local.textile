---
migrated: node/119
layout: post
title: !binary |-
  RWplY3V0YXIgcHJvZ3JhbWFzIFggZW4gb3RyYSBtw6FxdWluYSB2acOpbmRv
  bG9zIGVuIGxvY2Fs
created: 1133085770
author: !binary |-
  ZGF2aWRfdmlsbGE=
category: !binary |-
  cmVjaXBl
tags:
- !binary |-
  bmV0d29ya2luZw==
---
<blockquote class="head">
A veces se necesita ejecutar un programa con interfaz gráfica que reside en una máquina distinta y queremos verlo en la máquina que estamos. Esta receta explica cómo conseguirlo sin tener que abrir una sesión X ni tener que utilizar un "escritorio remoto" como <tt>vnc</tt>.
</blockquote>


<h2>Método 1: Exportar display</h2>

El método 'clásico' cuando queremos ejecutar un programa en una máquina remota y ver su interfaz en nuestro cliente X local es:
      

<div class="console">
{% highlight console %}
user@local:~$ xhost remoto
remoto being added to access control list
user@local:~$
{% endhighlight %}
</div>

Con eso se consigue que el servidor X, que corre en nuestra máquina, acepte conexiones externas de la máquina "remoto". Pero si queremos que admita conexiones de cualquier máquina hay que poner:
      

<div class="console">
{% highlight console %}
user@local:~$ xhost +
access control disabled, clients can connect from any host
user@local:~$
{% endhighlight %}
</div>

Aunque esto puede suponer un problema de seguridad grave.
    
Ahora accede a la máquina remota con <tt>telnet</tt> o algo similar y exporta el 'display' para aplicaciones X.


<div class="console">
{% highlight console %}
user@remoto:~$ export DISPLAY=local:0
user@remoto:~$
{% endhighlight %}
</div>
    
La instrucción <tt>export</tt> declara una variable de entorno de la _shell_ (no tiene nada que ver con la expresión exportar display).

Con esto, la aplicación X sabrá que debe utilizar el servidor X de la máquina llamada 'local' en lugar de usar el de la máquina en la que se ejecuta. Puedes comprobar que funciona con algo como:


<div class="console">
{% highlight console %}
user@remoto:~$ xeyes
user@remoto:~$
{% endhighlight %}
</div>

Con lo que deberías ver el clásico programilla de los ojos en la máquina local.

<h2>Método 2: ssh</h2>

El servidor <tt>ssh</tt> es capaz de gestionar automáticamente la conexión X siempre que servidor y cliente estén configurados adecuadamente.

Edita el fichero <tt>/etc/ssh/sshd_config</tt> del servidor y haz la siguiente modificación, que sirve para que el servidor <tt>ssh</tt> remoto devuelva el tráfico X11.

<pre>
  X11Forwarding = yes
</pre>

Edita el fichero <tt>/etc/ssh/ssh_config</tt> del cliente y haz la siguiente modificación, Esto hace que el cliente <tt>ssh</tt> local solicite el tráfico X11.

<pre>
  ForwardX11 = yes
</pre>

Como alternativa a esto, el usuario puede solicitarlo por línea de comando al hacer la conexión:


<div class="console">
{% highlight console %}
ssh -X <em>remoto</em>
{% endhighlight %}
</div>

Si lo haces en las dos máquinas, podrás utilizar este mecanismo en ambos sentidos. Sólo queda reiniciar el servidor con:


<div class="console">
{% highlight console %}
root@remoto:~# /etc/init.d/ssh restart
root@remoto:~#
{% endhighlight %}
</div>
    
Y ya tienes el efecto deseado, compruébalo con <tt>xeyes</tt>... (por ejemplo)

<h2>Enlaces</h2>

* "SSH y SCP para acceder a equipos remotos sin necesidad de clave":node/6
