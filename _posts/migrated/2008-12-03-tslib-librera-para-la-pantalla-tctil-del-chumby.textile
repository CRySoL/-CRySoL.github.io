---
migrated: node/1056
layout: post
title: ! 'Tslib: librería para la pantalla táctil del Chumby'
created: 1228321891
author: Lk2
category: receta
tags:
- Arco
- Chumby
---
bq(head). Cuando tienes un dispositivo con pantalla táctil y quieres programar algo para él siempre puede ser de ayuda tener un método de entrada tan fácil como la propia pantalla del dispositivo. Si nuestro aparato tiene, como en el caso del Chumby, un Linux metido dentro y tienes forma de compilar software para él, *Tslib* es tu respuesta.
<!--break-->
*Tslib* se suele utilizar en muchos dispositivos embebidos para proporcionar la funcionalidad de la pantalla táctil a los programadores. Se utiliza en muchos dispositivos de este tipo, entre ellos el TomTom, el Nokia 770 o el que nos ocupará en esta receta: el "Chumby":http://<a href="http://www.chumby.com">www.chumby.com</a>

h2. Preparándolo todo

Para poder compilar esta librería para el Chumby necesitarás tener lo siguiente:

# "Un Chumby con acceso por SSH":http://crysol.org/node/950.
# "Un entorno de desarrollo preparado para el Chumby":http://crysol.org/node/959.
# "Un directorio compartido por NFS":http://crysol.org/node/64 para pasarle al Chumby los ficheros (no es obligatorio, se puede hacer con un pendrive USB)

Una vez tengas todos estos ingredientes solo te queda ponerte manos a la obra:

h2. Compilando *Tslib*

Para realizar la compilación primero entra en la _jaula_ chroot para no guarrear nada. Supondré que has creado tu _jaula_ en un directorio llamado *chumby*.



<div class="console">
{% highlight console %}

$ sudo chroot chumby
{% endhighlight %}
</div>


Una vez allí ve a tu _home_ (con el fin de guarrear el sistema de ficheros lo menos posible) y descarga allí el código fuente. En este punto tienes dos posibles opciones: la versión publicada actualmente (1.0) o bajar la versión del repositorio subversion.

h3. Opción A


<div class="console">
{% highlight console %}

CHROOT@Chumby:~# wget http://prdownload.berlios.de/tslib/tslib-1.0.tar.bz2
{% endhighlight %}
</div>


h3. Opción B


<div class="console">
{% highlight console %}

CHROOT@Chumby:~# svn co svn://svn.berlios.de/tslib/trunk/tslib tslib-svn
{% endhighlight %}
</div>


Sobra decir que si el comando anterior no te funciona tienes que instalar *subversion* dentro de tu chroot.

Usando el método que hayas usado conseguirás tener un directorio con el código fuente de Tslib en tu _home_. Entremos y realicemos lo siguiente:



<div class="console">
{% highlight console %}

CHROOT@Chumby:~# cd tslib-XXXX
CHROOT@Chumby:tslib-XXXX# ./autogen.sh
{% endhighlight %}
</div>


Tras ello se creará en el directorio un script *_configure_*. Este script requiere de las *autotools* para utilizarse, así que ya sabes lo que tienes que instalar dentro de tu chroot, si no lo hiciste ya.

El script _configure_ acepta multitud de argumentos. Para que funcione nuestra compilación cruzada, los parámetros que debemos decirle son:



<div class="console">
{% highlight console %}

CHROOT@Chumby:tslib-XXXX# ./configure --build=i686-pc-linux-gnu --host=arm-linux --prefix=/mnt/nfs
{% endhighlight %}
</div>


Las opciones significan lo siguiente:
* --build=i686-pc-linux-gnu: es la arquitectura y SO dónde estás compilando. Si es diferente deberías cambiarla (utiliza la salida del script *config.guess*).
* --host=arm-linux: arquitectura y sistema operativo destino de la compilación. Hará que se busque si existe un compilador cruzado para esa arquitectura.
* --prefix=/mnt/nfs: es la ruta donde se copiarán los ficheros cuando hagamos la instalación. Es recomendable (aunque ni mucho menos obligatorio) que esta ruta sea la misma para el Chumby. Yo por ejemplo, dado que los ficheros se los paso al Chumby por NFS creo este directorio en el chroot y lo monto por NFS desde el Chumby en la misma ubicación.

Una vez hayas ejecutado el _configure_ tan solo te quedarán los dos pasos más sencillos (pero más lentos) de todo el proceso:



<div class="console">
{% highlight console %}

CHROOT@Chumby:tslib-XXXX# make
CHROOT@Chumby:tslib-XXXX# make install
{% endhighlight %}
</div>


¡OJO! Si al hacer _make_ tienes un error relacionado con la funció *rpl_malloc* deberás abrir el fichero *config.h* y comentar la línea dónde aparece lo siguiente:



<div>
{% highlight c %}
#define malloc rpl_malloc
{% endhighlight %}
</div>


Una vez comentada vuelve a ejecutar _make_ y todo debería ir bien. Por otra parte, _make install_ copiará los ficheros generados a la ruta especificada por _--prefix_ en el _configure_ anterior.

h2. Preparar el Chumby

Conéctate a tu Chumby por SSH y monta tu directorio por NFS en /mnt/nfs (o dónde más rabia te de) o pincha tu pendrive USB:



<div class="console">
{% highlight console %}

chumby:~# mount -t nfs -o nolock usuario@host:/home/usuario/chumby/mnt/nfs /mnt/nfs
{% endhighlight %}
</div>


Para calibrar la pantalla ejecutaremos un programa con interfaz gráfica, por lo que es recomendable que _matemos_ el panel de control del Chumby y habilitemos el FrameBuffer 0, que es dónde se mostrará esa interfaz:



<div class="console">
{% highlight console %}

chumby:~# stop_control_panel
chumby:~# echo 0 > /proc/driver/imxfb/enable
{% endhighlight %}
</div>


Antes de intentar calibrar la pantalla debes asegurarte de lo siguiente:

* Tienes permiso de escritura en el directorio NFS/pincho USB desde el Chumby y NFS te lo permite.
* Edita el fichero /mnt/nfs/etc/ts.conf y des-comenta la línea del *module_raw input*
* Configura las variables de entorno para poder ejecutar el programa sin necesidad de indicarle la ruta completa ni dónde se encuentran las librerías. Para esto puedes crearte un fichero de configuración de las variables de entornos necesarias y ponerlo en tu directorio NFS/pincho USB para usarlo siempre que lo necesitemos:



<div class="console">
{% highlight console %}

export HOME=/mnt/nfs/root
export PATH=$PATH:/mnt/nfs/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/mnt/nfs/lib
export TSLIB_TSDEVICE=/dev/input/event0
export TSLIB_FBDEVICE=/dev/fb0
export TSLIB_PLUGINDIR=/mnt/nfs/lib/ts
export TSLIB_CONSOLEDEVICE=/dev/ttyS0
export TSLIB_CONFFILE=/mnt/nfs/etc/ts.conf
export TSLIB_CALIBFILE=/mnt/nfs/etc/pointercal
export POINTERCAL_FILE=/mnt/nfs/etc/pointercal
export QWS_MOUSE_PROTO=Tslib:/dev/input/event0
export QWS_KEYBOARD=USB:/dev/input/event1
{% endhighlight %}
</div>


Para no tener que ejecutar esto cada vez que quieras hacer alguna prueba puedes guardar las líneas anteriores en un fichero (por ejemplo, _enviroment_) y ejecutarlo cada vez que nos haga falta con:


<div class="console">
{% highlight console %}
chumby:~# source enviroment
{% endhighlight %}
</div>

h2. Probando el invento

Para probar si hemos compilado/instalado todo correctamente necesitarías crear y compilar un programa usando las librerías de Tslib. Si tienes prisa y quieres probarlo ya :P estás de suerte: junto con la librería se compilan unos programas (que están en el directorio _bin_). Uno de ellos es el primero que tendrás que ejecutar: *ts_calibrate*

Cuando lo ejecutes deberá aparecerte en la pantalla del Chumby algo como esto:

!<a href="http://crysol.org/files/capture1.jpg">http://crysol.org/files/capture1.jpg</a>!

Simplemente tienes que pulsar en la cruz tantas veces como va cambiando de sitio. En la terminal SSH podrśa ver cuando termina el proceso. Es importante que cuando termines compruebes que se ha creado un fichero llamado *pointercal* en el directorio _/etc_ de tu directorio NFS/pincho USB.
