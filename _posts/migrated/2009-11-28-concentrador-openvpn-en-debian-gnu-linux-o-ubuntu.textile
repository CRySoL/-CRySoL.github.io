---
migrated: node/1266
layout: post
title: Concentrador OpenVPN en Debian GNU/Linux (o Ubuntu)
created: 1259374431
author: david_villa
category: recipe
tags:
- Arco
- seguridad
- networking
---
Cómo interconectar dos redes inaccesibles entre sí ya sea porque ambas están detrás de NAT o por consecuencias de las nuevas e incomprensibles «políticas de seguridad» de la empresa.
<!--break-->
h2. Ingredientes

* openvpn
* iptables

h2. Generación de certificados y claves:

Ejecuta lo siguiente:



<div class="console">
{% highlight console %}

# cp -a /usr/share/doc/openvpn/examples/easy-rsa /etc/openvpn
# cd /etc/openvpn/easy-rsa/2.0
# . ./vars
# ./clean-all
# ./build-ca
{% endhighlight %}
</div>


h3. Clave para el servidor. 

El servidor debería ser una máquina con una IP pública. Si no es posible, se puede hacer en una máquina con IP privada pero habrá que redireccionar el puerto desde el router. El servidor va a rutar tráfico entre la red remota y redes locales que son accesibles para él pero no lo son remotamente.



<div class="console">
{% highlight console %}

# ./build-key-server servidor
# ./build-dh
{% endhighlight %}
</div>


Todo esto genera los siguientes ficheros en el directorio @keys@:

* @ca.crt@
* @ca.key@
* @servidor.crt@
* @servidor.key@
* @dh1024.pem@

Los puedes mover a @/etc/openvpn@ por comodidad.

h3. Clave para el cliente

Cada cliente que quieras conectar a la red remota debe tener una clave y un certificado para autenticarse contra el servidor. Necesitas repetir esto por cada cliente que quieras incorporar a la VPN.



<div class="console">
{% highlight console %}

# ./build-key marcial
{% endhighlight %}
</div>


Esto genera los siguientes ficheros:

* @marcial.crt@
* @marcial.key@

Tienes que copiar esos dos ficheros y el @ca.crt@ al directorio @/etc/openvpn@ del cliente. Intenta que sea de la forma más segura posible.


h2. Configuración

En el servidor crea el fichero @/etc/openvpn/mivpn.conf@ y escribe esto:



<div>
{% highlight text %}
port 1194
proto udp
dev tun
persist-tun
ca ca.crt
cert servidor.crt
key servidor.key
dh dh1024.pem
server 10.1.1.0 255.255.255.0
ifconfig-pool-persist ipp.txt
client-to-client
keepalive 10 120
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 4 
{% endhighlight %}
</div>


Y en los clientes:



<div>
{% highlight bash %}
tls-client
client
dev tun
proto udp
remote server.example.org  # El nombre público del servidor 
float                      # Solo si el servidor tiene IP dinámica
resolv-retry infinite
nobind
persist-key
persist-tun
ca ca.crt
cert marcial.crt           # Aquí tu certificado 
key marcial.key            # y clave
comp-lzo
verb 4
{% endhighlight %}
</div>


Ejecuta lo siguiente en ambas máquinas:



<div class="console">
{% highlight console %}

# /etc/init.d/openvpn start
{% endhighlight %}
</div>



h2. Probando...

Si todo ha ido bien tendrás una nueva interfaz de red llamada @tun0@ con una IP en la red 10.1.1.0/24:



<div class="console">
{% highlight console %}

# ip addr show tun0
10: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 100
    link/[65534] 
    inet 10.1.1.10 peer 10.1.1.9/32 scope global tun0
{% endhighlight %}
</div>


Y tendrás también rutas nuevas para usar ese enlace:



<div class="console">
{% highlight console %}

# ip route show
10.1.1.0/24 via 10.1.1.9 dev tun0 
10.1.1.9 dev tun0  proto kernel  scope link  src 10.1.1.10 
192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.4  metric 1 
default via 192.168.1.1 dev eth0  proto static 
{% endhighlight %}
</div>


Y deberías poder acceder desde el cliente al servidor y viceversa usando las direcciones privadas.

h2. Encaminando

Imagina que el servidor tiene acceso a la red 120.20.30.0/24 pero que es inaccesible desde el exterior de la empresa. Veamos cómo conseguir que los clientes de la VPN puedan llegar a las máquinas de esa red utilizando el servidor de la VPN como router. Todos los cambios que se indican a continuación se realizan sólo en el servidor.

En fichero de configuración del servidor (el que escribiste antes) añade esto:


<div>
{% highlight text %}
push "route 120.20.30.0 255.255.255.0"
{% endhighlight %}
</div>

Esa ruta se añadirá automáticamente a los clientes para que ruten el tráfico hacia esa red a través de la VPN.

Y por último es necesario activar el reenvío (forwarding) y el NAT, dado que el servidor actuará como router entre la red privada y una red pública. Para ello escribe lo siguiente en @/etc/sysctl.conf@:


<div>
{% highlight text %}
net.ipv4.ip_forward=1
{% endhighlight %}
</div>

Y añade la siguiente regla iptables:



<div class="console">
{% highlight console %}

# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
{% endhighlight %}
</div>


Para que esta regla se aplique automáticamente aunque se reinicie el servidor modifica @/etc/network/interfaces@ para que quede así:


<div>
{% highlight text %}
iface eth0 inet static
        [...]
        pre-up iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
{% endhighlight %}
</div>

Como ya he comentado esto es para un servidor con IP fija, pero si es dinámica los cambios son mínimos.

Para más información sobre configuración de iptables y rutado puedes mirar estas recetas:

* "Compartir la conexión a Internet (router doméstico) con GNU/Linux":router-casero.
* "La enésima receta de iptables":iptables.


No olvides reiniciar el servicio en el servidor y en el cliente:



<div class="console">
{% highlight console %}

# /etc/init.d/openvpn restart
{% endhighlight %}
</div>


h2. Referencias

* "OpenVPN en Debian y Clientes Windows (Roadwarriors)":http://<a href="http://www.linux-os.com.ar/linuxos/openvpn-en-debian-y-clientes-windows-roadwarriors/">www.linux-os.com.ar/linuxos/openvpn-en-debian-y-clientes-windows-roadwarriors/</a>
* "Connecting to office network using OpenVPN tunnel":http://<a href="http://www.debian-administration.org/articles/489">www.debian-administration.org/articles/489</a>
