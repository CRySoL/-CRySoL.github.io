---
migrated: node/534
layout: post
title: Montar un repositorio estándar de paquetes Debian
created: 1169751701
author: cleto
comments: true
category: recipe
tags:
- Debian
---
Ya vimos <a href="/node/506">como montar un repositorio trivial de paquetes Debian</a>. Ahora vamos a hacer un repositorio general de paquetes, algo más avanzado y general que lo anterior pero se basa en la misma filosofía. 


<!--break-->



<h1>Estructura de directorios</h1>
Primeramente, debemos crear la estructura de nuestro nuevo repositorio, que vamos a llamar <em>mirepo</em> como ejemplo. El lugar donde lo debemos crear la estructura puede ser cualquiera, por ejemplo en <em>/var/</em>:

<pre>
mirepo
|
+-dists
  |
  |-stable
  | |-main
  | | |-binary-i386
  | | |-binary-powerpc
  | | |-binary-amd64
  | | +-source
  | |-contrib
  | | |-binary-i386
  | | |-binary-powerpc
  | | |-binary-amd64
  | | +-source
  | +-non-free
  |   |-binary-i386
  |   |-binary-powerpc
  |   |-binary-amd64
  |   +-source
  |
  |-testing
  | |-main
  | | |-binary-i386
  | | |-binary-powerpc
  | | |-binary-amd64
  | | +-source
  | |-contrib
  | | |-binary-i386
  | | |-binary-powerpc
  | | |-binary-amd64
  | | +-source
  | +-non-free
  |   |-binary-i386
  |   |-binary-powerpc
  |   |-binary-amd64
  |   +-source
  |
  +-unstable
    |-main
    | |-binary-i386
    | |-binary-powerpc
    | |-binary-amd64
    | +-source
    |-contrib
    | |-binary-i386
    | |-binary-powerpc
    | |-binary-amd64
    | +-source
    +-non-free
      |-binary-i386
      |-binary-powerpc
      |-binary-amd64
      +-source
</pre>
Como se puede ver, vamos a usar las tres distribuciones de Debian (<em>stable</em>, <em>testing</em> y <em>unstable</em>), cada una con sus ramas (<em>main</em>, <em>contrib</em> y <em>non-free</em>), para tres arquitecturas (<em>i386</em>, <em>powerpc</em> y <em>amd64</em>) y con sus respectivos paquetes de fuentes (directorios <em>sources</em>).

Aquí puede sobrar o faltar según tus propias necesidades. Quizás sólo quieras una distribución o incluir también la arquitectura <em>arm</em>; solo tendrías que quitar o añadir las partes que te interesen. Eso sí, <b>siguiendo la estructura específicada</b>.

<h1>Llenando el repositorio</h1>
Los paquetes binarios los debemos almacenar en los directorios binary's correspondientes y los sources en la rama que pertenezca. Si tú numero de paquetes es considerable, ni que decir tiene que es aconsejable automatizar esta tarea con algún script que lo haga de forma periódica.

Una vez tengamos todos los archivos en su sitio, si queremos que nuestros usuarios del repositorio puedan utilizar el <a href="http://www.argon.org/~roderick/apt-pinning.html">pinning de APT</a> debemos incluir en cada directorio <em>binary</em> y <em>source</em> un archivo llamado <b>Release</b> con la siguiente forma:
<pre>
Archive: "nombre de la distribución (stable, testing o unstable)"
Component: "nombre de la rama (main, contrib, non-free)"
Origin: "Persona/compañía/proyecto que da origen al repositorio"
Label: "Etiqueta descriptiva"
Architecture: "La arquitectura a la que perteneces (i386, powerpc, amd64 o source)"
</pre>

Las comillas serán necesarias dependiendo de si el dato es una cadena sin espacios o no. Es un archivo bastante sencillo y que se debe personalizar para cada directorio binary donde vaya a ser guardado.

Con los repositorios llenos de paquetes y los Release en su sitio sólo nos queda crear los ficheros índices. Utilicemos la herramienta <b>apt</b> para este fin. Antes de nada, tenemos que crear unos ficheros de configuración para que apt haga lo necesario para nuestro repositorio. Vamos a crear, concretamente, 2 tipos de archivos que pueden almacenarse en el raíz del repositorio (<em>/var/mirepo/</em>)

<h2>apt-"distribucion"-release.conf</h2>
En nuestro caso, deberíamos crear tres: <em>apt-stable-release.conf, apt-testing-release.conf, apt-unstable-release.conf</em>. Vamos a mostrar la estructura de uno de ellos y la del resto es idéntica, salvo cambios propios de cada distribución. Para la distribución <em>stable</em>, tendríamos en <em>apt-stable-release.conf</em>:
<pre>
APT::FTPArchive::Release::Origin “Tu nombre/empresa/proyecto”;
APT::FTPArchive::Release::Label “Etiqueta descriptiva”;
APT::FTPArchive::Release::Suite “stable”;
APT::FTPArchive::Release::Architectures “i386 powerpc amd64 source”;
APT::FTPArchive::Release::Components “main contrib non-free”;
APT::FTPArchive::Release::Description “Descripcion detallada”;
</pre>
Debemos rellenar los campos oportunos con los valores específicos para cada uno de los archivos.

<h2>apt-ftparchive.conf</h2>
Este otro archivo de configuración define las reglas que <b>apt</b> usará y aplicará a la hora de crear los ficheros índices. Para nuestro ejemplo sería un archivo bastante largo y no proporciona información añadida hacerlo para todas las ramas, por lo que se muestra sólo la distribución unstable:
<pre>
Dir {
  ArchiveDir ".";
  CacheDir ".";
};

#Como se van a comprimir
Default {
  Packages::Compress "gzip bzip2";
  Sources::Compress "gzip bzip2";
  Contents::Compress "gzip bzip2";
};

#Rutas a paquetes binarios
BinDirectory "dists/unstable/main/binary-i386" {
  Packages "dists/unstable/main/binary-i386/Packages";
  Contents "dists/unstable/Contents-i386";
  SrcPackages "dists/unstable/main/source/Sources";
};

BinDirectory "dists/unstable/main/binary-powerpc" {
  Packages "dists/unstable/main/binary-powerpc/Packages";
  Contents "dists/unstable/Contents-powerpc";
  SrcPackages "dists/unstable/main/source/Sources";
};

BinDirectory "dists/unstable/main/binary-amd64" {
  Packages "dists/unstable/main/binary-amd64/Packages";
  Contents "dists/unstable/Contents-amd64";
  SrcPackages "dists/unstable/main/source/Sources";
};

#<----Aquí debemos especificar el resto de rutas a paquetes binarios

#Especifica de qué consta la distribución
Tree "dists/unstable" {
  Sections "main doc";
  Architectures "i386 powerpc amd64";
};

#<--- Las demás distribuciones

Default {
  Packages {
    Extensions ".deb";
  };
</pre>

Con esto almacenado y configurado podemos hacernos un breve script (<em>update-archives.sh</em>) que automatizará la actualización del repositorio:
<pre>
#!/bin/sh
apt-ftparchive generate apt-ftparchive.conf
apt-ftparchive -c apt-unstable-release.conf release dists/unstable/ >dists/unstable/Release
apt-ftparchive -c apt-stable-release.conf release dists/stable/ >dists/stable/Release
apt-ftparchive -c apt-testing-release.conf release dists/testing/ >dists/testing/Release
</pre>
Este script debemos ejecutarlo cada vez que añadamos un paquete binario o fuente a nuestro repositorio. Se puede hacer a mano o utilizando <em>cron</em>.

<h1>Utilizando el repositorio</h1>
Una vez que hemos hecho todo lo anterior podemos añadir la siguiente línea a nuestro <em>/etc/apt/sources.list</em> para utilizar el repositorio de forma local:
<pre>deb file:///var/mirepo unstable main contrib non-free</pre>
La línea anterior utilizaría la distribución <em>unstable</em>, con las tres ramas.
 
Si quieres tenerlo accesible de forma remota, puedes crear un enlace simbólico en <em>/var/www/</em> para redireccionar la consulta <em>http</em> a tu servidor Apache:


<div class="console">
{% highlight console %}
# cd /var/www
# ln -s /var/mirepo mirepo
{% endhighlight %}
</div>

Y añadir como repositorio la línea:

<pre>
deb http://midominio.com/mirepo testing main contrib
</pre>

<h1>Referencias</h1>
* <a href="http://es.tldp.org/Manuales-LuCAS/doc-guia-ubuntu-breeze/guia-ubuntu-htmls/repositorios.html">Traducción  al español del Howto oficial de Debian para crear repositorios.</a>
* <a href="http://batustack.wordpress.com/tag/gnulinux/debian/">Otro howto bastante completo</a>
