---
migrated: node/1317
layout: post
title: !binary |-
  Q3JlYW5kbyB0w7puZWxlcyBUQ1AvSVAgKHBvcnQgZm9yd2FyZGluZykgY29u
  IFNTSDogTG9zIDggZXNjZW5hcmlvcyBwb3NpYmxlcyB1c2FuZG8gT3BlblNT
  SA==
created: 1262544530
author: !binary |-
  Q1J5U29M
category: !binary |-
  cmVjaXBl
tags:
- !binary |-
  bmV0d29ya2luZw==
---
Esta receta es una copia (gracias a su licencia CC) de un post del blog de "Vicente Navarro":http://<a href="http://www.vicente-navarro.com/blog/2009/05/24/creando-tuneles-tcpip-port-forwarding-con-ssh-los-8-escenarios-posibles-usando-openssh">www.vicente-navarro.com/blog/2009/05/24/creando-tuneles-tcpip-port-forwarding-con-ssh-los-8-escenarios-posibles-usando-openssh</a> (un blog con un contenido estupendo por cierto). La pongo aquí porque me parece un material muy bueno y en previsión de que (FSM no lo quiera) dicho blog desaparezca repentinamente.


<!--break-->


La función típica del protocolo de red Secure Shell (SSH) es acceder en modo terminal a un sistema remoto y ejecutar allí comandos de forma segura gracias a que los datos van cifrados. Pero además, a través de esa conexión de datos segura, es posible crear túneles (reenviar puertos / port forwarding) entre los extremos conectados de forma que las conexiones TCP/IP se encauzan a través de la conexión SSH con lo que podemos conseguir saltarnos cualquier firewall o bloqueo de puertos siempre que tengamos la posibilidad de conectar con SSH.

Como este tema está muy tratado por toda la red:

* "Wikipedia: SSH Tunneling":http://en.wikipedia.org/wiki/Tunneling_protocol#SSH_tunneling
* "O’Reilly: Using SSH Tunneling":http://<a href="http://www.oreillynet.com/pub/a/wireless/2001/02/23/wep.html">www.oreillynet.com/pub/a/wireless/2001/02/23/wep.html</a>
* "ssh.com: Tunneling Explained":http://<a href="http://www.ssh.com/support/documentation/online/ssh/winhelp/32/Tunneling_Explained.html">www.ssh.com/support/documentation/online/ssh/winhelp/32/Tunneling_Explained.html</a>
* "ssh.com: Port Forwarding":http://<a href="http://www.ssh.com/support/documentation/online/ssh/adminguide/32/Port_Forwarding.html">www.ssh.com/support/documentation/online/ssh/adminguide/32/Port_Forwarding.html</a>
* "SecurityFocus: SSH Port Forwarding":http://<a href="http://www.securityfocus.com/infocus/1816">www.securityfocus.com/infocus/1816</a>
* "Red Hat Magazine: SSH Port Forwarding":http://magazine.redhat.com/2007/11/06/ssh-port-forwarding/

en esta entrada no entraremos en los detalles del reenvío de puertos, sino que pretende ser una chuleta, una referencia rápida (cheat sheet) de cómo reenviar puertos TCP con OpenSSH en los 8 diferentes escenarios que se pueden dar. Otros clientes de SSH como PuTTY también permiten el reenvío de puertos, pero la configuración se hará con un interfaz gráfico. Nosotros nos centraremos en OpenSSH.

En los siguientes ejemplos y situaciones supondremos que tenemos una red externa y una red interna y entre ambas redes, la única conexión posible es una conexión SSH entre el nodo de la red external externo1 y el nodo de la red interna interno1. El nodo externo2 está en la red externa y tiene conectividad total con externo1. El nodo interno2 está en la red interna y tiene conectividad total con interno1.

<center>
<img src="/files/ssh_tunnel_sin_tunel.png"/>
</center>


h2. Escenario 1: Usar en externo1 un servicio TCP ofrecido por interno1

*(Local port forwarding / bind_address=localhost / host=localhost)*

El sistema externo1 se puede conectar al sistema interno1 a través de OpenSSH y además quiere conectarse al servidor de VNC (puerto 5900) del sistema interno1:

<center>
<img src="/files/ssh_tunnel_1.png"/>
</center>

Lo conseguiremos con este comando:


<div class="console">
{% highlight console %}

externo1 $ ssh -L 7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>

Ahora en el sistema externo1 podemos comprobar que el puerto 7900 está esperando conexiones:


<div class="console">
{% highlight console %}

externo1 $ netstat -ltn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
...
tcp        0      0 127.0.0.1:7900            0.0.0.0:*               LISTEN
...
{% endhighlight %}
</div>

Sólo necesitamos ejecutar ahora en externo1:


<div class="console">
{% highlight console %}

externo1 $ vncviewer localhost::7900
{% endhighlight %}
</div>

para conectarnos al servidor VNC de interno1.

Nota: Esta forma de cambiar el puerto del no está documentada en el "man vncviewer":http://<a href="http://www.realvnc.com/products/free/4.1/man/vncviewer.html">www.realvnc.com/products/free/4.1/man/vncviewer.html</a>. Aparece en: "About VNCViewer configuration of the output TCP port":http://<a href="http://www.realvnc.com/pipermail/vnc-list/2006-April/054551.html">www.realvnc.com/pipermail/vnc-list/2006-April/054551.html</a>. También es así como lo hace "el vncviewer de TightVNC":http://<a href="http://www.tightvnc.com/vncviewer.1.html">www.tightvnc.com/vncviewer.1.html</a>.

h2. Escenario 2: Usar en externo2 un servicio TCP ofrecido por interno1 

*(Local port forwarding / bind_address=0.0.0.0 / host=localhost)*

Esta vez partimos de una situación similar a la anterior pero ahora queremos que sea externo2 quien se conecte al servidor VNC de interno1:

<center>
<img src="/files/ssh_tunnel_2.png"/>
</center>

El comando adecuado sería este:


<div class="console">
{% highlight console %}

externo1 $ ssh -L 0.0.0.0:7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>

Es similar al del primer escenario; pero en aquél, si nos fijamos en la salida del netstat, el puerto 7900 se había asociado a la dirección de localhost, a la 127.0.0.1, por lo que sólo procesos locales podían conectarse a él. Esta vez especificamos que el puerto se asocie a 0.0.0.0, para que el sistema acepte conexiones a cualquier IP local de la máquina:


<div class="console">
{% highlight console %}

externo1 $ netstat -ltn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
...
tcp        0      0 0.0.0.0:7900            0.0.0.0:*               LISTEN
...
{% endhighlight %}
</div>

De modo que ahora, desde externo2, podemos ejecutar:


<div class="console">
{% highlight console %}

externo2 $ vncviewer externo1::7900
{% endhighlight %}
</div>

para conectarnos al servidor VNC de interno1.

En lugar de especificar la IP 0.0.0.0, también podríamos usar la opción -g (Allows remote hosts to connect to local forwarded ports) así:


<div class="console">
{% highlight console %}

externo1 $ ssh -g -L 7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>

con exactamente el mismo resultado que el comando anterior:


<div class="console">
{% highlight console %}

externo1$ ssh -L 0.0.0.0:7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>

Por otra parte, si hubiéramos querido restringir la conexión a sólo alguna de las IPs locales del sistema, podríamos haber sido más específicos:


<div class="console">
{% highlight console %}

externo1 $ ssh -L 192.168.24.80:7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>


<div class="console">
{% highlight console %}

externo1 $ netstat -ltn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
...
tcp        0      0 192.168.24.80:7900            0.0.0.0:*               LISTEN
...
{% endhighlight %}
</div>

h2. Escenario 3: Usar en interno1 un servicio TCP ofrecido por externo1

*(Remote port forwarding / bind_address=localhost / host=localhost)*

En el primer escenario, era el propio sistema con el servidor de SSH el que ofrecía otro servicio. Ahora el sistema con el cliente de SSH es el que ofrece el servicio que el sistema con el servidor de SSH quiere usar:

<center>
<img src="/files/ssh_tunnel_3.png"/>
</center>

El comando que usaremos es el mismo que en el primer escenario cambiando el parámetro -L por -R:


<div class="console">
{% highlight console %}

externo1 $ ssh -R 7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>

Y ahora donde veremos que tenemos el puerto 7900 escuchando es en interno1:


<div class="console">
{% highlight console %}

interno1 $ netstat -lnt
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
...
tcp        0      0 127.0.0.1:7900          0.0.0.0:*               LISTEN
...
{% endhighlight %}
</div>

De modo que ahora desde interno1 podemos usar el servidor VNC de externo1 así:


<div class="console">
{% highlight console %}

interno1 $ vncviewer localhost::7900
{% endhighlight %}
</div>

h2. Escenario 4: Usar en interno2 un servicio TCP ofrecido por externo1

*(Remote port forwarding / bind_address=0.0.0.0 / host=localhost)*

Similar al tercer escenario pero ahora, igual que hacíamos en el segundo escenario, asociaremos el puerto reenviado a la IP 0.0.0.0 para que otros nodos puedan usar el servicio:

<center>
<img src="/files/ssh_tunnel_4.png"/>
</center>

El comando apropiado es:


<div class="console">
{% highlight console %}

externo1 $ ssh -R 0.0.0.0:7900:localhost:5900 usuario@interno1
{% endhighlight %}
</div>

Sin embargo, es importante entender que, por motivos de seguridad, esto no funcionará si en la configuración del servidor de SSH no modificamos el valor del parámetro GatewayPorts que por defecto está a no:


<div>
{% highlight text %}
GatewayPorts

    Specifies whether remote hosts are allowed to connect to ports forwarded for the client. By default, sshd(8) binds remote port
forwardings to the loopback address. This prevents other remote hosts from connecting to forwarded ports. GatewayPorts can be
used to specify that sshd should allow remote port forwardings to bind to non-loopback addresses, thus allowing other hosts to
connect. The argument may be “no” to force remote port forwardings to be available to the local host only, “yes” to force remote
port forwardings to bind to the wildcard address, or “clientspecified” to allow the client to select the address to which the
forwarding is bound. The default is “no”.
{% endhighlight %}
</div>

Si no tenemos la posibilidad de modificar la configuración del servidor, no podremos usar este tipo de reenvío de puertos. Al menos no de forma sencilla, ya que, si no hay otros impedimentos, un usuario puede abrir un puerto (>1024) para escuchar conexiones externas y reenviar dicha petición a localhost:7900. Esto se podría hacer, por ejemplo, con netcat (Debian #310431: sshd_config should warn about GatewayPorts workaround.)

De modo que en el /etc/ssh/sshd_config añadiremos:


<div>
{% highlight text %}
GatewayPorts clientspecified
{% endhighlight %}
</div>

tras lo cual tendremos que releer la configuración con “sudo /etc/init.d/ssh reload” (Debian y Ubuntu).

Comprobamos que interno1 está escuchando peticiones de todas las IPs:


<div class="console">
{% highlight console %}

interno1 $ netstat -ltn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
...
tcp        0      0 0.0.0.0:7900            0.0.0.0:*               LISTEN
...
{% endhighlight %}
</div>

Y ya podremos usar el servicio de VNC desde interno2:


<div class="console">
{% highlight console %}

interno2 $ vncviewer interno1::7900
{% endhighlight %}
</div>


h2. Escenario 5: Usar en externo1 un servicio TCP ofrecido por interno2

*(Local port forwarding / bind_address=localhost / host=interno2)*

<center>
<img src="/files/ssh_tunnel_5.png"/>
</center>

En este escenario usaremos el siguiente comando:


<div class="console">
{% highlight console %}

externo1 $ ssh -L 7900:interno2:5900 usuario@interno1
{% endhighlight %}
</div>

Y accederemos al servicio ejecutando en externo1 el comando:


<div class="console">
{% highlight console %}

externo1 $ vncviewer localhost::7900
{% endhighlight %}
</div>

h2. Escenario 6: Usar en interno1 un servicio TCP ofrecido por externo2

*(Remote port forwarding / bind_address=localhost / host=externo2)*

<center>
<img src="/files/ssh_tunnel_6.png"/>
</center>

En este escenario usaremos el siguiente comando:


<div class="console">
{% highlight console %}

externo1 $ ssh -R 7900:externo2:5900 usuario@interno1
{% endhighlight %}
</div>

Y accederemos al servicio ejecutando en interno1 el comando:


<div class="console">
{% highlight console %}

interno1 $ vncviewer localhost::7900
{% endhighlight %}
</div>

h2. Escenario 7: Usar en externo2 un servicio TCP ofrecido por interno2

*(Local port forwarding / bind_address=0.0.0.0 / host=interno2)*

<center>
<img src="/files/ssh_tunnel_7.png"/>
</center>

En este escenario usaremos el siguiente comando:


<div class="console">
{% highlight console %}

externo1 $ ssh -L 0.0.0.0:7900:interno2:5900 usuario@interno1
{% endhighlight %}
</div>

o alternativamente:


<div class="console">
{% highlight console %}

externo1 $ ssh -g -L 7900:interno2:5900 usuario@interno1
{% endhighlight %}
</div>

Y accederemos al servicio ejecutando en externo2 el comando:


<div class="console">
{% highlight console %}

externo2 $ vncviewer externo1::7900
{% endhighlight %}
</div>

h2. Escenario 8: Usar en interno2 un servicio TCP ofrecido por externo2

*(Remote port forwarding / bind_address=0.0.0.0 / host=externo2)*

<center>
<img src="/files/ssh_tunnel_8.png"/>
</center>

En este escenario usaremos el siguiente comando:


<div class="console">
{% highlight console %}

externo1 $ ssh -R 0.0.0.0:7900:externo2:5900 usuario@interno1
{% endhighlight %}
</div>

El servidor SSH tiene que estar configurado con “GatewayPorts clientspecified“, como hemos visto en el escenario 4.

Y accederemos al servicio ejecutando en interno2 el comando:


<div class="console">
{% highlight console %}

interno2 $ vncviewer interno1::7900
{% endhighlight %}
</div>

:wq

*[Nota de CRySoL]*

Si tienes alguna duda o aportación que hacer sobre el tema, considera hacerla en "el post original":http://<a href="http://www.vicente-navarro.com/blog/2009/05/24/creando-tuneles-tcpip-port-forwarding-con-ssh-los-8-escenarios-posibles-usando-openssh/">www.vicente-navarro.com/blog/2009/05/24/creando-tuneles-tcpip-port-forwarding-con-ssh-los-8-escenarios-posibles-usando-openssh/</a> para así evitar «fragmentación». Por supuesto, si el comentario es para indicar un error por mi parte al copiar la receta, ponlo aquí.
