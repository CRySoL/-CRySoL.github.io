---
migrated: node/959
layout: post
title: Entorno de desarrollo para el Chumby
created: 1216943461
author: oscarah
category: recipe
tags:
- Chumby
---
Se pretende construir un entorno de desarrollo para crear aplicaciones en diferentes lenguajes (c/c++ y flash mayormente) para el <a href="http://www.chumby.com">Chumby</a>
</blockquote>





<h2>Ingredientes</h2>

<ol>
<li>Una máquina con Debian (preferiblemente SID), actualizada</li>
<li>Un Chumby</li>
<li>Las aplicaciones pertinentes en cada sección</li>
</ol>

<h2>Al tema</h2>

Existen varias formas de crear un entorno de desarrollo para nuestra plataforma (ARM). Algunas ensucian más el sistema que otras. Por ejemplo, en el wiki de Chumby, te explican que debes bajarte un paquetito (bastante grande, por cierto), y descomprimirlo en <i>/</i>. Esto mete en <i>/usr</i> todo lo necesario, pero no te da nada de control sobre lo que ha pasado. Si tienes que volver al estado anterior, tendrás que hacerlo a mano.

La opción que me he planteado, además de ser más divertida e instructiva, te permite tener más flexibilidad y control sobre todo lo que usas para el Chumby: hacer una jaula (un entorno chroot que lo llaman) donde poner todo lo que necesites.

<h2>Creando la jaula</h2>

Para hacer el entorno chroot, he seguido la receta de <a href="http://crysol.org/node/933">javieralso</a>, con algunas modificaciones (pero no muchas, porque esto es muy sencillo). Básicamente lo que hay que hacer es buscarse una carpeta donde hacer el despliegue (os aconsejo no poner espacios en el nombre, o quizá tengáis problemas): 


<div class="console">
{% highlight console %}
user@box:~$ mkdir chumby

{% endhighlight %}
</div>

Y ahora, si no tienes instalado <i>cdebootstrap</i> , ¿a que esperas? ;-) Ya sabes, puedes usar <i>apt*</i> para instalarlo de la forma usual. Si tienes dudas, pregunta. 

Lo siguiente es el despliegue, que consiste en instalar un sistema Debian básico para ir tirando... :P


<div class="console">
{% highlight console %}
user@box:~$ sudo cdebootstrap unstable chumby http://ftp.es.debian.org/debian
{% endhighlight %}
</div>

Si tienes dudas sobre qué hace este último comando, mírate la receta de javieralso. Una vez que haya terminado, que tardará un ratejo (cosa normal, teniendo en cuenta que, salvo algunos detalles, es una instalación de Debian completamente funcional), lo siguiente antes de continuar es arreglar un par de cosillas pendientes. Para ello, entramos en la jaula:


<div class="console">
{% highlight console %}
user@box:~$ sudo chroot chumby
root@box:/#

{% endhighlight %}
</div>

Eres root, así que ten cuidado con lo que haces ;-) Lo primero de todo es instalar algunos paquetes que son vitales para la vida: emacs, bash-completion, locales...


<div class="console">
{% highlight console %}
root@box:/# apt-get update
...
root@box:/# apt-get install emacs bash-completion locales file

{% endhighlight %}
</div>

Si te quieres librar del problema de las locales (en caso de que te aparezca), pues simplemente con un reconfigure ('dpkg-reconfigure locales') y seleccionando ES_UTF-8 como el predeterminado del sistema (o el que quieras) debe bastar.

Luego, ya que no hay usuarios, puedes crear en <i>/home</i> carpetas con los usuarios del sistema no-chroot que van a usar la jaula, y añadir los scripts de inicio que creas convenientes, alias, prompts, etc.:


<div class="console">
{% highlight console %}
root@box:/# mkdir /home/user
root@box:/# cd
root@box:~# 

{% endhighlight %}
</div>

Este es el <i>.bashrc</i> que he puesto para mi usuario:

<div class="console">
{% highlight console %}

alias ls='ls --color' 
alias clean='rm *~ \#*\# -rfv' 
alias emacs='emacs -nw'

. /etc/bash_completion 

PS1='\[\033[01;29m\]CHROOT@Chumby\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ ' 

# Mount /proc filesystem
if [ ! -f /proc/cpuinfo ];
  then mount -t proc none /proc
fi;

# Go to home... :-p
cd
{% endhighlight %}
</div>

Con un bonito 'prompt' para distinguir cuando estas dentro del chroot y cuando no. Ten cuidado al cortar y pegar, pues puede que a <i>bash</i> no le  gusten las comillas de tu navegador... :-p Otro detalle de la jaula es que hay ciertos sistemas de ficheros que no te monta automáticamente, por ejemplo <i>/proc</i> y <i>/dev</i>. Si necesitas montarlos, sigue la receta de javieralso, aunque algunos, como <i>/proc</i> y <i>/sys</i> se pueden montar desde la jaula.

El <i>proc</i> es casi imprescindible, así que puedes montarlo de la siguiente forma:

<b>Nota:</b> como puedes ver, he añadido una linea en el <i>.bashrc</i> para que se monte cuando inicies sesión. Así no te tienes que preocupar de estos menesteres.


<div class="console">
{% highlight console %}
<b>CHROOT@Chumby</b>:/# mount -t proc none /proc
{% endhighlight %}
</div>

<h2>La GNU Toolchain para ARM</h2>

Existen mil formas de instalarla. Desde la web de Chumby te aconsejan que te bajes un paquete comprimido con todo ya compilado y lo descomprimas en <i>/</i>, lo que meterá en <i>/usr</i> todo lo necesario, pero que te dejará el sistema hecho unos zorros. Si lo haces en una jaula, no es tanto el daño. Así que, bájate el fichero (unos 120 MiB), y lo descomprimes en la carpeta raíz:


<div class="console">
{% highlight console %}
<b>CHROOT@Chumby</b>:~# cd /
<b>CHROOT@Chumby</b>:/# wget -c http://files.chumby.com/toolchain/arm-linux-v4.1.2b.tar.gz
...
<b>CHROOT@Chumby</b>:/# tar zxvf arm-linux-v4.1.2b.tar.gz
</pre>
{% endhighlight %}
</div>

¡Y ya está! Lo podemos probar con un ejemplo muy sencillo en C++, el típico, conocido y sufrido <i>Hello world</i>:


<div>
{% highlight cpp %}
// -*- mode: C++; coding: utf-8 -*-

#include <iostream>

int 
main(int argc, char* argv[]) {
  std::cout << “Hola desde el Chumby!” << std::endl;
  return 0;
}
{% endhighlight %}
</div>

Y lo puedes compilar así: 


<div class="console">
{% highlight console %}
<b>CHROOT@Chumby</b>:samples# arm-linux-g++ test.cpp -o test
<b>CHROOT@Chumby</b>:samples# ls
test   test.cpp
<b>CHROOT@Chumby</b>:samples# file test
test: ELF 32-bit LSB executable, ARM, version 1, dynamically linked (uses shared libs), for GNU/Linux 2.6.0, not stripped
<b>CHROOT@Chumby</b>:samples#

{% endhighlight %}
</div>
Para ejecutarlo, hay que meterlo en el Chumby. Más abajo explico cómo montar una partición NFS para poder mover directamente nuestros binarios allí y tenerlos disponibles en el Chumby automágicamente.

<h2>Flash con Haxe</h2>

Haxe es un "lenguaje de programación <i>open source</i> multiplataforma" (sic) un tanto especial. Permite compilar el código a otros lenguajes (javascript, php) o al bytecode de ciertas máquinas virtuales (<a href="http://nekovm.org/">NekoVM</a>) y, que es lo que nos interesa, a Flash (swf). 

La instalación es sencilla, puesto que es paquete Debian ;-):


<div class="console">
{% highlight console %}
<b>CHROOT@Chumby</b>:samples# apt-get install haxe

{% endhighlight %}
</div>

El lenguaje no es muy complejo, sintácticamente parecido a C++ o Java. Tiene algunas librerias interesantes y un sistema para instalarlas basado en repositorios, <a href="http://haxe.org/com/haxelib?lang=en">HaxeLib</a>. Pero, como dice el refrán, <i>un trozo de código vale más que mil comentarios</i> :-p . Veamos un ejemplo (el que viene en la documentación, por cierto):

<b>Nota:</b> ¡Cuidado con los nombres! Sucede como en Java, el nombre del fichero .hx debe ser igual al nombre de la clase que contiene. El nombre del .hxml no es crítico.   

<div>
{% highlight java %}
// -*- mode: haxe; coding: utf-8 -*-

// Test.hx
class Test {
    static function main() {
        trace("Hello World !");
    }
}
{% endhighlight %}
</div>
<div>
{% highlight text %}
# compile.hxml
-swf test.swf
-main Test
{% endhighlight %}
</div>

Y para compilarlo, basta con:


<div class="console">
{% highlight console %}
<b>CHROOT@Chumby</b>:samples# haxe compile.hxml
<b>CHROOT@Chumby</b>:samples# ls
compile.hxml  Test.hx  test.swf
<b>CHROOT@Chumby</b>:~# file test.swf 
test.swf: Macromedia Flash data (compressed), version 8

{% endhighlight %}
</div>

Si quieres probarlo, de nuevo hay que llevarlo al Chumby. Esto, al ser Flash, presenta varias alternativas. La más sencilla pasa por copiarlo a la partición NFS que montas en el Chumby, y ejecutarlo con el FlashPlayer que tiene dentro. También puedes crear un <i>profile</i> de los que usa el panel del aparato para que lo gestione él. Más abajo veremos la primera. La segunda opción se deja como ejercicio para el lector ;-) En <a href=" http://wiki.chumby.com/mediawiki/index.php/Chumby_tricks#Mixing_local_widgets_into_a_channel">Mixing local widgets into a chanel</a> tienes algunos detalles...

<h2>Exportando por NFS</h2>

El objetivo es tener una carpeta donde podamos intercambiar ficheros con nuestro aparatito. Quizá lo más sencillo sea usar un PenDrive, pero montar una partición por NFS es sin duda mas cómodo a largo plazo. Como hay muchas recetas ya, simplemente enlazo una:
<ul><li><a href="http://crysol.org/node/64">Compartir ficheros con NFS</a></li></ul>

Como el Chumby lo usamos siempre como usuario root tenemos que tener en cuenta una funcionaldiad sobre seguridad hecha por NFS: no permite montar en modo escritura archivos pertenecientes al usuario "root" y grupo "root". Ese caso es el nuestro, si montamos por NFS un directorio dentro del chroot. Para saltarnos esa feature tan sólo añadir a la línea de configuración del archivo <i>/etc/exports</i> la opción "no_root_squash".

La parte de configuración del Chumby explica como montar esa partición para probar los tests. 

<h2>Configurar el Chumby</h2>

Pues eso, veamos principalmente como configurar el Chumby para que monte la partición NFS automáticamente en el arranque. Antes de nada, es necesario que consigas acceso por ssh, permanente o no. Para ello, esta receta te viene que ni pintada ;-) : 
<ul><li><a href="http://crysol.org/node/950">SSH en el Chumby</a></li></ul>
Tenemos dos formas de automatizar el montado: usando un PenDrive o modificando los scripts de inicio del GNU/Linux.

La opción más sencilla sin duda es la del PenDrive, pero un tanto incómoda. Hacemos uso de una característica del GNU que lleva el cacharro: cuando arranca, comprueba si hay un fichero en el Pen, llamado <i>debugchumby</i> con permisos de ejecución. Si lo hay, lo ejecuta. Obviamente, lo que hacemos es crearlo y meter el comando pertinente:


<div>
{% highlight text %}
#!/usr/bin/env sh

cd /mnt
mkdir nfs
mount -t nfs -o nolock 192.168.0.1:/home/user/chumby/mnt/nfs nfs
{% endhighlight %}
</div>

Por supuesto, cambia el comando con las opciones que quieras y que te apliquen.

Si quieres hacer esto mismo sin usar el pen, tienes que seguir estas recomendaciones: <a href="http://wiki.chumby.com/mediawiki/index.php/Chumby_tricks#Running_something_at_boot_without_debugchumby">Running something at boot without debugchumby</a>. Es un <i>hack</i> muy chapucero, y susceptible a fallos ante actualizaciones grandes del sistema. Se me ocurre otra forma de hacerlo, pero pasa por actualizar el firmware, así que será carne de otra receta ;-) 

Hay una tercera, que no deja de ser un hack chapucero, pero que es menos peligroso. Se trata de editar el fichero <i>/psp/.profile</i> que se ejecuta cada vez que inicias sesión en el sistema. Tiene el inconveniente de que no se montará automáticamente, a menos que entres por SSH al Chumby. Si te vale, edita el fichero <i>/psp/.profile</i> y añade estas lineas (o algo análogo):


<div>
{% highlight text %}
# Mount nfs partitions (oscarah)
if [ ! -d /mnt/nfs ]; then
  mkdir /mnt/nfs
  mount -t nfs -o nolock 192.168.0.1:/home/user/chumby/mnt/nfs /mnt/nfs
fi;
{% endhighlight %}
</div>

Una vez montado en NFS, puedes copiar allí los ejemplos de arriba y probarlos:


<div class="console">
{% highlight console %}
chumby:/# cd /mnt/nfs
chumby:/mnt/nfs# ls
test      test.swf
chumby:/mnt/nfs# ./test
Hola desde el Chumby!
chumby:/mnt/nfs# stop_control_panel 
stopping control panel
...
chumby:/mnt/nfs# chumbyflashplayer.x -i test.swf 
...
{% endhighlight %}
</div>

El ejemplo en Flash debe verse desde el Chumby. No cambia la iluminación del display, por lo que si estaba en modo <i>noche</i> no se verá muy bien... Para recuperar el panel de control, simplemente usa <i>start_control_panel</i>.

<h2>Garantía de calidad</h2>

Esta receta la terminé de hacer en julio de 2008. Al momento de redactarla, probé todo en una Debian/SID recién instalada y actualizada. Y que conste que todo funcionaba... :-p

<h2>Referencias</h2>

<ol>
<li><a href="http://www.chumby.com">Web oficial</a></li>
<li><a href="http://www.chumby.com/developers">Chumby para desarrolladores</a></li>
<li><a href="http://wiki.chumby.com/mediawiki/index.php/Main_Page">Wiki de Chumby</a></li>
<li><a href="http://crysol.org/node/933">Entornos chroot con cdebootstrap en Debian</a></li>
<li><a href="http://wiki.chumby.com/mediawiki/index.php/GNU_Toolchain">La GNU ToolChain desde Chumby.com</a></li>
<li><a href="http://crysol.org/node/950">SSH en el Chumby</a></li>
<li><a href="http://haxe.org/">Haxe, Flash para GNU</a></li>
</ol>
